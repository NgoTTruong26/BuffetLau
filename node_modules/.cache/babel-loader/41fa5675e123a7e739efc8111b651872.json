{"ast":null,"code":"import * as yup from \"yup\";\nyup.addMethod(yup.number, \"numberPeople\", function (message) {\n  return this.test(\"numberPeople2\", message, function (value) {\n    console.log(value);\n    return true;\n  });\n});\nexport default yup;","map":{"version":3,"sources":["V:/Buffet-t12/client/src/yup/yupGlobal.ts"],"names":["yup","addMethod","number","message","test","value","console","log"],"mappings":"AAAA,OAAO,KAAKA,GAAZ,MAAqB,KAArB;AAGAA,GAAG,CAACC,SAAJ,CAAgCD,GAAG,CAACE,MAApC,EAA4C,cAA5C,EAA4D,UAAUC,OAAV,EAAmB;AAC7E,SAAO,KAAKC,IAAL,CAAU,eAAV,EAA2BD,OAA3B,EAAoC,UAAUE,KAAV,EAAiB;AAC1DC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AAEA,WAAO,IAAP;AACD,GAJM,CAAP;AAKD,CAND;AA0BA,eAAeL,GAAf","sourcesContent":["import * as yup from \"yup\";\r\nimport { AnyObject, Maybe } from \"yup/lib/types\";\r\n\r\nyup.addMethod<yup.NumberSchema>(yup.number, \"numberPeople\", function (message) {\r\n  return this.test(\"numberPeople2\", message, function (value) {\r\n    console.log(value);\r\n\r\n    return true;\r\n  });\r\n});\r\n\r\ndeclare module \"yup\" {\r\n  /* interface StringSchema<\r\n    TType extends Maybe<string> = string | undefined,\r\n    TContext extends AnyObject = AnyObject,\r\n    TOut extends TType = TType\r\n  > extends yup.BaseSchema<TType, TContext, TOut> {\r\n    emptyAsUndefined(a: any): StringSchema<TType, TContext>;\r\n  } */\r\n\r\n  interface NumberSchema<\r\n    TType extends Maybe<number> = number | undefined,\r\n    TContext extends AnyObject = AnyObject,\r\n    TOut extends TType = TType\r\n  > extends yup.BaseSchema<TType, TContext, TOut> {\r\n    numberPeople(message: string): NumberSchema<TType, TContext>;\r\n  }\r\n}\r\n\r\nexport default yup;\r\n"]},"metadata":{},"sourceType":"module"}